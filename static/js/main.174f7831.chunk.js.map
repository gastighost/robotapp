{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchField","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAwBeA,EApBE,SAAC,GAAa,EAAZC,OAEX,MAAM,IAAIC,MAAM,mCCQTC,EAZG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKC,UAAU,MAAf,SACA,uBACAA,UAAU,mCACVC,KAAK,SACLC,YAAY,oBACZC,SAAUJ,OCOHK,EAZA,SAACC,GACZ,OACI,qBAAKC,MAAO,CACRC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAHZ,SAKKJ,EAAMK,YCWJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAG7B,WACI,OAAIG,KAAKJ,MAAMC,SACJ,gEAEJG,KAAKX,MAAMK,a,GAhBEQ,aCmDbC,G,wDA7CX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GACF,EAAKZ,SAAS,CAACtB,OAAQkC,S,oBAQ/B,WACI,MAA8Bb,KAAKJ,MAA5BjB,EAAP,EAAOA,OAAQ2B,EAAf,EAAeA,YACTQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACrC,OAAOA,EAAMC,KAAKC,cAAcC,SAASb,EAAYY,kBAErD,OAAKvC,EAAOyC,OAIJ,sBAAKpC,UAAU,KAAf,UACA,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWD,aAAciB,KAAKI,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,UACA,cAAC,EAAD,CAAUzB,OAAQmC,WARf,6C,GA7BDZ,cCKHmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OAAQ,cACb,EADa,IAEbC,SAASC,eAAe,SAM5BX,M","file":"static/js/main.174f7831.chunk.js","sourcesContent":["import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n    if (true) {\n        throw new Error('You have encountered an error!');\n    }\n    return (\n        <div>\n            {\n            robots.map((robot, i) => {\n                return <Card \n                key={i} \n                id={robots[i].id} \n                name={robots[i].name} \n                username={robots[i].username} \n                email={robots[i].email}/>\n            })\n            }\n        </div>\n    );\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className='pa2'>\n        <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search' \n        placeholder='search for robots'\n        onChange={searchChange}/>\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{\n            overflowY: \"scroll\",\n            border: '5px solid black',\n            height: '800px'\n            }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>You have encountered an error!</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => {\n            return response.json();\n        })\n        .then(users => {\n            this.setState({robots: users})\n        })\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }\n\n    render(){\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        if (!robots.length){\n            return <h1>Loading</h1>\n        } else { \n            return (\n                <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                <ErrorBoundary>\n                <CardList robots={filteredRobots}/>\n                </ErrorBoundary>\n                </Scroll>\n                </div>\n                );\n        }\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render( <\n    App / > ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}